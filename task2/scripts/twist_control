#!/usr/bin/python3

import sys
import rospy
from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped, Twist
from std_msgs.msg import Int8
from task2.msg import control
import tf
import tf2_ros
import time

class TwistControl:
    def __init__(self):
        print("Twist control node started")
        rospy.init_node('twist_control')
        # self.global_frame_ = rospy.get_param("/map")
        # self.robot_frame_ = rospy.get_param("base_link")

        # print("Global frame: " + self.global_frame_)
        # print("Robot frame: " + self.robot_frame_)

        self.twist_pub = rospy.Publisher('/cmd_vel_mux/input/teleop', Twist, queue_size=10)
        self.goal_status_pub = rospy.Publisher('/circle_goal/status', Int8, queue_size=10)

        # self.location_sub = rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, self.location_callback)
        self.goal_sub = rospy.Subscriber('/circle_goal', PoseStamped, self.goal_callback) # faces the goal
        
        self.forward_sub = rospy.Subscriber('/circle_goal/forward', Int8, self.forward_callback) # moves forward until stopped
        self.angular_sub = rospy.Subscriber('/circle_goal/angular', Int8, self.angular_callback) # moves angular until stopped

        self.controller_sub = rospy.Subscriber('/circle_goal/controller', control, self.controller_callback)
        
        #current position and orientation descriptors.
        self.x = 0
        self.y = 0
        self.z_ang = 0
        self.w_ang = 0

        # self.inital = True
        self.sign = 0

        self.global_pose_ = PoseStamped()

        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)


        self.angular_const = 0.1
        self.linear_const = 0.03

        self.forward_flag = 1
        self.angular_flag = 1


    def overwrite_location(self):
        """
        Overwrite the current location with the global pose from get_robot_pose.
         * Placeholder to see if this works better than /amcl_pose
        """
        self.x = self.global_pose_.translation.x
        self.y = self.global_pose_.translation.y
        self.z_ang = self.sign * (self.global_pose_.rotation.z)
        self.w_ang = self.sign * (self.global_pose_.rotation.w)
        print("Inside Overwrite: x: " + str(self.x) + " y: " + str(self.y) + " z_ang: " + str(self.z_ang) + " w_ang: " + str(self.w_ang))


    def get_robot_pose(self):
        """
        Get the pose of the robot in the global frame.
        Set the global pose to represent the pose of the robot in the global frame.
        Format of the global pose is PoseStamped:
        global_pose.translation is our position in the global frame.
        global_pose.rotation is our orientation in the global frame in quarterion format.
        """
        transformed= self.tf_buf.lookup_transform("map", "base_link", rospy.Time(0), rospy.Duration(10.0))
        # print(transformed)
        self.global_pose_ = transformed.transform
            ## here we have a situation where in amcl rotation w cannot be negative
            ## but in our transformation it can. If W is negative, we know we  have to flip the sign
            ## this is because of Q representing a rotation matrix, and -Q representing the absolute same rotation
            ## quarterion representation of the angle: [x, y, z, w]
        if self.global_pose_.rotation.w >= 0:
            self.sign = 1
        else:
            self.sign = -1
        # print(self.global_pose_)
        self.overwrite_location()


    
    # Simple location updater function, listens at /amcl_pose, updates self.pose.
    # def location_callback(self, msg):
    #     self.x = msg.pose.pose.position.x
    #     self.y = msg.pose.pose.position.y
    #     self.z_ang = msg.pose.pose.orientation.z
    #     self.w_ang = msg.pose.pose.orientation.w
        # print("x: " + str(self.x) + " y: " + str(self.y) + " z_ang: " + str(self.z_ang) + " w_ang: " + str(self.w_ang))

    # Upon receiving goal, face it using twist messages, repeat until pretty accurate.
    # Basic logic should be done well enough, next we have to make sure the angle is more accurate
    # and the overall movement is smoother.
    def goal_callback(self, msg):
        self.forward_flag = 0
        self.angular_flag = 0
        print("in goal_callback")
        print("msg: " + str(msg))
        # First deal with orientation
        self.get_robot_pose()
        euc_angle = tf.transformations.euler_from_quaternion([msg.pose.orientation.x, msg.pose.orientation.y, msg.pose.orientation.z, msg.pose.orientation.w])
        print("euc_angle", euc_angle)
        robot_angle = tf.transformations.euler_from_quaternion([0, 0, self.z_ang, self.w_ang])
        print("robot_angle", robot_angle)

        bool_flag = True
        # Twist turn until robot is facing about the correct position,
        while (bool_flag):
            robot_angle = tf.transformations.euler_from_quaternion([0, 0, self.z_ang, self.w_ang])
            twist = Twist()
            if(robot_angle[2] > euc_angle[2]):
                twist.angular.z = -self.angular_const
            else:
                twist.angular.z = self.angular_const
            self.twist_pub.publish(twist)
            bool_flag = abs(self.z_ang - msg.pose.orientation.z) > 0.01 or abs(self.w_ang - msg.pose.orientation.w) > 0.01 or self.z_ang * msg.pose.orientation.z < 0
            self.get_robot_pose()
            

        print("done with orientation")
        print(abs(self.z_ang - msg.pose.orientation.z) > 0.04 and abs(self.w_ang - msg.pose.orientation.w) > 0.04 and self.z_ang * msg.pose.orientation.z < 0)
        print("current angle: z:" + str(self.z_ang) + " w: " + str(self.w_ang))
        print("goal angle: z:" + str(msg.pose.orientation.z) + " w: " + str(msg.pose.orientation.w))
        # Then issue movement forward, with x velocity being a modest 0.1.
        """
        Don't handle moving forward yet, just handle turning.
        """
        # print("CURRENT GOAL: x:" + str(msg.pose.position.x) + " y: " + str(msg.pose.position.y))
        # while (abs(self.x - msg.pose.position.x) > 0.11 or abs(self.y - msg.pose.position.y) > 0.11):
        #     twist = Twist()
        #     twist.linear.x = self.linear_const
        #     self.twist_pub.publish(twist)
        #     print("current position: x:" + str(self.x) + " y: " + str(self.y))
        #     print("goal position: x:" + str(msg.pose.position.x) + " y: " + str(msg.pose.position.y))
        #     self.get_robot_pose()
        # print("done with position")
        # print("current position: x:" +     str(self.x) + " y: " + str(self.y))
        # print("goal position: x:" + str(msg.pose.position.x) + " y: " + str(msg.pose.position.y))
        # Finally, stop the robot and publish that the goal has been reached.
        send = Int8(1)
        print("Sending goal status: " + str(send))
        self.forward_flag = 1
        self.angular_flag = 1

        # print("Time to adjust orientation, for next circle detections")
        for i in range(0, 10): ## repeatedly send the goal status to make sure it is received.
            self.goal_status_pub.publish(send)


    def angular_callback(self, msg):
        print("in angular callback: ", msg)
        # count_spins = 0
        self.get_robot_pose()
        start_time = time.time()
        # saved_angle = tf.transformations.euler_from_quaternion([0, 0, self.z_ang, self.w_ang])
        while(self.angular_flag == 1 and time.time() - start_time < 40):
            twist = Twist()
            twist.angular.z = -self.angular_const*1.9
            self.twist_pub.publish(twist)
            self.get_robot_pose()
            # current_angle = tf.transformations.euler_from_quaternion([0, 0, self.z_ang, self.w_ang])
            # if(abs(saved_angle[2] - current_angle[2]) < 0.01):
            #     count_spins+=1
            #     print("count_spins: ", count_spins)
            print("rotating")
        print("done rotating")


    def forward_callback(self, msg):
        print("in forward callback: ", msg)
        while(self.forward_flag == 1):
            twist = Twist()
            twist.linear.x = self.linear_const
            self.twist_pub.publish(twist)
            self.get_robot_pose()
            print("moving forward")
        print("Flag is: ", self.forward_flag)
        print("done moving forward")
        

    def controller_callback(self, msg):
        #TODO REWRITE FOR control MSG
        print("in controller callback: ", msg)
        if(msg.movement_type == "forward"):
            self.forward_flag = msg.control_number
            print("Received forward_flag: ", self.forward_flag)
            return
        if(msg.movement_type == "angular"):
            self.angular_flag = msg.control_number
            print("Received angular_flag: ", self.angular_flag)
            return

if __name__ == "__main__":
    twist_control = TwistControl()
    # twist_control.get_robot_pose()
    print("Starting twist control node")
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    